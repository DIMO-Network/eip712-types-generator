// Code generated by github.com/DIMO-Network/eip712-types-generator DO NOT EDIT.
package {{ .PackageName }}

{{range .Methods}}
// {{.Name -}}({{- range $index, $element := .Arguments}}{{if $index}}, {{end}}{{$element.Type}} {{$element.Name -}}{{- end -}})
type {{ .Name}} struct {
	{{- range .Arguments}}
	{{.CapitalName}} {{.GoType}} `json:"{{.Name}}"`
	{{- end}}
}

func ({{ .Alias }} *{{ .Name}}) Name() string {
	return "{{ .Name}}"
}

func ({{ .Alias }} *{{ .Name}}) Type() []apitypes.Type {
	return []apitypes.Type{
		{{- range .Arguments}}
		{
			Name: "{{.Name}}",
			Type: "{{.Type}}",
		},
		{{- end}}
	}
}

func ({{ .Alias }} *{{ .Name}}) Message() apitypes.TypedDataMessage {
	return apitypes.TypedDataMessage{
		{{- range .Arguments}}
		"{{ .Name }}": {{ .TypeDataStructMethod }}, 
		{{- end}}
	}
}

func ({{ .Alias }} *{{ .Name}}) TypedDataAndHash(domain apitypes.TypedDataDomain) ([]byte, error) {
	td := &apitypes.TypedData{
		Types: apitypes.Types{
			"EIP712Domain": []apitypes.Type{
				{Name: "name", Type: "string"},
				{Name: "version", Type: "string"},
				{Name: "chainId", Type: "uint256"},
				{Name: "verifyingContract", Type: "address"},
			}, 
			{{ .Alias }}.Name(): {{ .Alias }}.Type(),
		},
		PrimaryType: {{ .Alias }}.Name(),
		Domain: domain,
		Message: {{ .Alias }}.Message(),
	}
	hash, _, err := apitypes.TypedDataAndHash(*td)
	return hash, err
}

{{end}}

func anySlice[A any](v []A) []any {
	n := len(v)
	out := make([]any, n)
	for i := 0; i < n; i++ {
		out[i] = v[i]
	}

	return out
}